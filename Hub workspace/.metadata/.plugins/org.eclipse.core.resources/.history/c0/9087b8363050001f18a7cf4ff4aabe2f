/* RTOS header files */

#include <ti/sysbios/BIOS.h>

#include <pthread.h>

#include <ioc.h>

#include "sys_ctrl.h"

#include "ti_drivers_config.h"

#include <inc/hw_ccfg.h>
#include <inc/hw_ccfg_simple_struct.h>

/* Header files required for the temporary idle task function */
#include <ti/drivers/Power.h>
#include <ti/drivers/power/PowerCC26XX.h>
#include <ti/drivers/GPIO.h>
#include <aon_rtc.h>
#include <prcm.h>
#include <ti/sysbios/BIOS.h>
#include <ti/sysbios/knl/Queue.h>
#include <ti/sysbios/knl/Semaphore.h>
#include <ti/sysbios/knl/Task.h>
#include <ti/sysbios/knl/Mailbox.h>
#include "Defines.h"
/* Header files required to enable instruction fetch cache */
#include <ti/drivers/dpl/HwiP.h>

#include "cpu.h"
#include "collector.h"

#include <string.h>

#include "control_task.h"
#include "console.h"
#include "embedded_cli.h"
#include "csf.h"
#include "par.h"
#include "time_clock.h"
#include "utc_clock.h"
#include "mac_util.h"
int32_t gmt = 5;
uint8_t gmt_zone = 18;

void onClearCLI(EmbeddedCli *cli, char *args, void *context)
{
    cli_printf(cli, "\33[2J");
}

void onFormNWK(EmbeddedCli *cli, char *args, void *context)
{
    const char *network = "Form Network";
    const char *newLine = "\r\n";

    cli_printf(cli, network);

    Csf_CLI_formnetwork();
}

void onOpenNWK(EmbeddedCli *cli, char *args, void *context)
{
    const char *network = "Open Network";
    const char *newLine = "\r\n";

    cli_printf(cli, network);

    Csf_CLI_opennetwork();
}

void onCloseNWK(EmbeddedCli *cli, char *args, void *context)
{
    const char *network = "Close Network";
    const char *newLine = "\r\n";
    cli_printf(cli, network);
    Csf_CLI_closenetwork();
}

void allDevicesInNetwork(EmbeddedCli *cli, char *args, void *context)
{

    for (int i = 0; i < CONFIG_MAX_DEVICES * 2; i++)
    {
        if (control_task_dev_info[i].structValid == 0xBEEF)
        {
            cli_printf(cli, "_____________________________");
            cli_printf(cli, "Index: %d", i + 1);
            cli_printf(cli, "Dev Addr: %d",
                       control_task_dev_info[i].dev_shortAddr);
            cli_printf(cli, "Dev signature: 0x%x",
                       control_task_dev_info[i].dev_signature);
            if (control_task_dev_info[i].isWatch
                    && !control_task_dev_info[i].isManager)
            {
                cli_printf(cli, "Watch");
            }
            else if (control_task_dev_info[i].isDing)
            {
                cli_printf(cli, "Call-Button");
            }
            else if (control_task_dev_info[i].isManager)
            {
                cli_printf(cli, "Manager");
            }

        }

    }

}

void eraseDevInfo(EmbeddedCli *cli, char *args, void *context)
{
    par_erase(device_info);
    cli_printf(cli, "Device Info Erased");

}

void setTime(EmbeddedCli *cli, char *args, void *context)
{
    setTimeEpoch();
}

void displayTime(EmbeddedCli *cli, char *args, void *context)
{
    uint32_t time = UTC_getClock();
    UTCTimeStruct tm;
    EPOCH_convertTime(&tm, time, gmt);
    static char print_str[300];
    uint16_t res_len = 0;

    cli_printf(cli, " Time Stamp: %d-%d-%d %dH %dM %dS ", tm.day, tm.month,
               tm.year, tm.hour, tm.minutes, tm.seconds);

}

void setWatchsTime(EmbeddedCli *cli, char *args, void *context)
{
    cli_printf(cli, "Sending Time to all the watches in the network");

    Util_setEvent(&Collector_events, COLLECTOR_SENSOR_SEND_EPOCH_TIME);

}

void createPairing(EmbeddedCli *cli, char *args, void *context)
{
    uint8_t options = 0;
uint8_t save_par = 0;
    int16_t index_watch = 0;
    int16_t index_callButton = 0;
    int16_t index_manager = 0;

    uint8_t ManagerAvailable = 0;

    char buffer[50];
    cli_printf(cli, "Single Watch can be paired with multiple Call-buttons");
    cli_printf(cli, "Single Call-button can only be paired with single Watch");
    cli_printf(cli, "");
    cli_printf(cli, "Select desired option, by entering the index");
    cli_printf(cli, "");
    cli_printf(cli, "[1] Start Pairing");
    options = receiveDecimalNumber(uart2Handle);

    if (options == 1)
    {
        cli_printf(cli, "");
        cli_printf(cli, "");
        cli_printf(
                cli,
                "Here is the list of Watches and Call-Buttons available in the network");
        cli_printf(cli, "");

        //  UART2_write(uart2Handle, &receivedChar, 1, NULL);

        for (int i = 0; i < CONFIG_MAX_DEVICES * 2; i++)
        {
            if (control_task_dev_info[i].structValid == 0xBEEF)
            {
                if (control_task_dev_info[i].isWatch
                        && !control_task_dev_info[i].isManager)
                {
                    cli_printf(cli, "[%d] Watch: %d ", i + 1,
                               control_task_dev_info[i].dev_shortAddr);
                }
                else if (control_task_dev_info[i].isDing)
                {
                    cli_printf(cli, "[%d] Callbutton: %d ", i + 1,
                               control_task_dev_info[i].dev_shortAddr);
                }

            }

        }
        cli_printf(cli, "");
        cli_printf(
                cli,
                "Enter Watch Index first and then Enter Call-Button Index which you want to pair");
        cli_printf(cli, "To Exit just enter '0'");
        index_watch = receiveDecimalNumber(uart2Handle);
        cli_printf(cli, "");
        if (index_watch != 0)
        {
            index_watch = index_watch - 1;
            index_callButton = receiveDecimalNumber(uart2Handle);

            if (index_callButton != 0)
            {
                index_callButton = index_callButton - 1;
                cli_printf(cli, "");
                cli_printf(cli, "");
                cli_printf(cli, "Here is the list of Managers");
                cli_printf(cli, "");

                for (int i = 0; i < CONFIG_MAX_DEVICES * 2; i++)
                {
                    if (control_task_dev_info[i].structValid == 0xBEEF)
                    {

                        if (control_task_dev_info[i].isManager)
                        {
                            cli_printf(cli, "[%d] Manager: %d ", i + 1,
                                       control_task_dev_info[i].dev_shortAddr);
                            ManagerAvailable = 1;
                        }

                    }
                }

                if (!ManagerAvailable)
                {
                    cli_printf(cli, "No manager Available");
                }
                else
                {
                    cli_printf(cli, "Enter Manager Index to pair with this.");
                    cli_printf(cli, "To Exit just enter '0'");
                    index_manager = receiveDecimalNumber(uart2Handle);
                    cli_printf(cli, "");
                }

                if (control_task_dev_info[index_watch].structValid == 0xBEEF
                        && control_task_dev_info[index_callButton].structValid
                                == 0xBEEF
                        && control_task_dev_info[index_watch].isWatch
                        && control_task_dev_info[index_callButton].isDing) //also make sure that the indexs are right with watch and callbutton
                {
                    for (int i = 0; i < CONFIG_MAX_DEVICES * 2; i++)
                    {
                        if (control_task_devPairing[i].structValid == 0xBEEF)
                        {

                            if (control_task_dev_info[index_callButton].dev_signature
                                    == control_task_devPairing[i].Ding_Devsignature)
                            {
                                if (control_task_dev_info[index_callButton].dev_shortAddr
                                        != control_task_devPairing[i].ding_shortAddr)
                                {

                                    control_task_devPairing[i].ding_shortAddr =
                                            control_task_dev_info[index_callButton].dev_shortAddr;
                                    save_par = 1;
                                }

                                /*We also check that if in this structure the watch*/
                                /*signature is different then user is trying to pair a CallButton to TWO watches which is not possible*/
                                /*A callbutton can only be paired to single watch at a time, therefore we override the current watch paired with it */
                                if (control_task_dev_info[index_watch].dev_signature
                                        != control_task_devPairing[i].Watch_Devsignature)
                                {

                                    control_task_devPairing[i].Watch_Devsignature =
                                            control_task_dev_info[index_watch].dev_signature;
                                    control_task_devPairing[i].watch_shortAddr =
                                            control_task_dev_info[index_watch].dev_shortAddr;
                                    save_par = 1;
                                }

                                break;

                            }

                        }
                        else
                        {

                            control_task_devPairing[i].watch_shortAddr =    control_task_dev_info[index_watch].dev_shortAddr;
                            control_task_devPairing[i].ding_shortAddr =     control_task_dev_info[index_callButton].dev_shortAddr;
                            control_task_devPairing[i].Watch_Devsignature = control_task_dev_info[index_watch].dev_signature;
                            control_task_devPairing[i].Ding_Devsignature =  control_task_dev_info[index_callButton].dev_signature;
                            control_task_devPairing[i].structValid = 0xBEEF;
                            save_par = 1;
                            break;
                        }

                    }

                }

                if(save_par == 1)
                {
                 par_save(device_pairing);
                  save_par = 0;
                }


                cli_printf(cli, "");
                cli_printf(cli, "Pairing Done");

            }
        }

    }

}

void allPairedDevices(EmbeddedCli *cli, char *args, void *context)
{

    for (int i = 0; i < CONFIG_MAX_DEVICES * 2; i++)
    {
        if (control_task_devPairing[i].structValid == 0xBEEF)
        {
            cli_printf(cli, "_____________________________");
            cli_printf(cli, "Index: %d", i + 1);
            cli_printf(cli, "Watch Addr: %d",
                       control_task_devPairing[i].watch_shortAddr);
            cli_printf(cli, "CallButton Addr: %d",
                       control_task_devPairing[i].ding_shortAddr);
            cli_printf(cli, "Manager Addr: %d",
                       control_task_devPairing[i].Manager_shortAddr);
            cli_printf(cli, "Watch ReferenceNumber: %d",
                       control_task_devPairing[i].Watch_ReferenceNumber);
            cli_printf(cli, "CallButton ReferenceNumber: %d",
                       control_task_devPairing[i].Ding_ReferenceNumber);
            cli_printf(cli, "_____________________________");
        }

    }

}
